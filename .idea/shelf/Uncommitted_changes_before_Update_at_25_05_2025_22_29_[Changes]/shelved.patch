Index: app/src/main/java/com/app/tibibalance/ui/screens/auth/forgot/ForgotPasswordScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * @file    ForgotPasswordScreen.kt\r\n * @ingroup ui_screens_auth // Grupo para pantallas de autenticación\r\n * @brief   Define el [Composable] para la pantalla de recuperación de contraseña.\r\n *\r\n * @details Este archivo contiene la implementación de la UI para la funcionalidad de\r\n * \"Olvidé mi contraseña\". Permite al usuario ingresar su dirección de correo\r\n * electrónico para recibir un enlace de restablecimiento.\r\n *\r\n * La pantalla utiliza [ForgotPasswordViewModel] para manejar la lógica de negocio y\r\n * el estado. Muestra:\r\n * - Un encabezado ([Header]) con título y botón de retroceso.\r\n * - Una imagen ilustrativa ([ImageContainer]).\r\n * - Un texto descriptivo ([Description]).\r\n * - Un campo de entrada para el correo electrónico ([InputEmail]) dentro de un [FormContainer].\r\n * - Un botón de acción principal ([PrimaryButton]) para enviar la solicitud.\r\n *\r\n * Maneja los estados de la UI (Idle, Loading, Success, Error) emitidos por el ViewModel:\r\n * - **Loading/Success:** Muestra un [com.app.tibibalance.ui.components.dialogs.ModalInfoDialog] para feedback.\r\n * - **Error:** Muestra un [Snackbar] con el mensaje de error.\r\n * Tras un envío exitoso, navega a la pantalla de inicio de sesión ([Screen.SignIn]).\r\n *\r\n * @see ForgotPasswordViewModel ViewModel que gestiona la lógica de esta pantalla.\r\n * @see ForgotPasswordUiState Estados de la UI para esta pantalla.\r\n * @see Header Componente reutilizable para la barra superior.\r\n * @see ImageContainer Componente para mostrar la imagen.\r\n * @see Description Componente para el texto instructivo.\r\n * @see FormContainer Contenedor para el campo de email.\r\n * @see InputEmail Campo de texto para el correo electrónico.\r\n * @see PrimaryButton Botón para enviar la solicitud.\r\n * @see com.app.tibibalance.ui.components.dialogs.ModalInfoDialog Diálogo para estados de carga y éxito.\r\n * @see androidx.compose.material3.SnackbarHost Para mostrar errores.\r\n * @see com.app.tibibalance.ui.navigation.Screen Rutas de navegación.\r\n */\r\n// ui/screens/auth/ForgotPasswordScreen.kt\r\npackage com.app.tibibalance.ui.screens.auth.forgot\r\n\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Check\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.*\r\nimport androidx.compose.ui.graphics.*\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.navigation.NavController\r\nimport com.app.tibibalance.R\r\nimport com.app.tibibalance.ui.components.*\r\nimport com.app.tibibalance.ui.components.buttons.PrimaryButton\r\nimport com.app.tibibalance.ui.components.containers.FormContainer\r\nimport com.app.tibibalance.ui.components.containers.ImageContainer\r\nimport com.app.tibibalance.ui.components.dialogs.DialogButton\r\nimport com.app.tibibalance.ui.components.dialogs.ModalInfoDialog\r\nimport com.app.tibibalance.ui.components.inputs.InputEmail\r\nimport com.app.tibibalance.ui.components.layout.Header\r\nimport com.app.tibibalance.ui.components.texts.Description\r\nimport com.app.tibibalance.ui.navigation.Screen\r\nimport com.app.tibibalance.ui.screens.auth.forgot.ForgotPasswordUiState\r\nimport com.app.tibibalance.ui.screens.auth.forgot.ForgotPasswordViewModel\r\n\r\n/**\r\n * @brief Composable que define la interfaz de usuario para la pantalla de recuperación de contraseña.\r\n *\r\n * @details Muestra una imagen, un texto instructivo, un campo para ingresar el correo electrónico\r\n * y un botón para enviar la solicitud de restablecimiento. Utiliza [com.app.tibibalance.ui.components.dialogs.ModalInfoDialog] para\r\n * indicar el estado de carga y éxito, y un [Snackbar] para errores.\r\n *\r\n * @param nav El [NavController] utilizado para la navegación entre pantallas.\r\n * @param vm La instancia de [ForgotPasswordViewModel] (inyectada por Hilt) que maneja la lógica\r\n * y el estado de esta pantalla.\r\n */\r\n@Composable\r\nfun ForgotPasswordScreen(\r\n    nav: NavController,\r\n    vm : ForgotPasswordViewModel = hiltViewModel()\r\n) {\r\n    /* ---- UI-state & helpers ---- */\r\n    // Observa el estado de la UI emitido por el ViewModel.\r\n    val uiState  by vm.ui.collectAsState()\r\n    // Estado para el Snackbar que mostrará errores.\r\n    val snackbar = remember { SnackbarHostState() }\r\n    // Scope de corrutina para lanzar operaciones asíncronas (como mostrar el Snackbar).\r\n    val scope    = rememberCoroutineScope()\r\n\r\n    /* Snackbar solo para error */\r\n    // Efecto lanzado cuando uiState cambia, específicamente para manejar errores.\r\n    LaunchedEffect(uiState) {\r\n        if (uiState is ForgotPasswordUiState.Error) {\r\n            // Muestra el mensaje de error en el Snackbar.\r\n            snackbar.showSnackbar((uiState as ForgotPasswordUiState.Error).message)\r\n            // Limpia el estado de error en el ViewModel para que el Snackbar no se muestre repetidamente.\r\n            vm.clearStatus()\r\n        }\r\n    }\r\n\r\n    /* ---------- ModalInfoDialog para Loading y Success ---------- */\r\n    // Determina si el diálogo modal debe ser visible (cuando está cargando o hay un mensaje de éxito).\r\n    val dialogVisible = uiState is ForgotPasswordUiState.Loading ||\r\n            uiState is ForgotPasswordUiState.Success\r\n\r\n    ModalInfoDialog(\r\n        visible = dialogVisible,\r\n\r\n        /* fase SPINNER */\r\n        loading = uiState is ForgotPasswordUiState.Loading, // Muestra el spinner si está cargando.\r\n\r\n        /* fase ÉXITO */\r\n        icon = if (uiState is ForgotPasswordUiState.Success) Icons.Default.Check else null, // Icono de check para éxito.\r\n        message = if (uiState is ForgotPasswordUiState.Success)\r\n            \"Hemos enviado un enlace para restablecer tu contraseña.\\nRevisa tu correo.\" // Mensaje de éxito.\r\n        else null,\r\n\r\n        /* botón “Aceptar” sólo en éxito */\r\n        primaryButton = if (uiState is ForgotPasswordUiState.Success)\r\n            DialogButton(\"Aceptar\") { // Define el botón primario para el estado de éxito.\r\n                vm.clearStatus() // Limpia el estado de éxito en el ViewModel.\r\n                // Navega a la pantalla de SignIn, eliminando la pantalla actual del backstack.\r\n                nav.navigate(Screen.SignIn.route) {\r\n                    popUpTo(Screen.Forgot.route) { inclusive = true }\r\n                }\r\n            }\r\n        else null,\r\n\r\n        /* bloqueo de back/click-outside mientras carga */\r\n        // Permite descartar el diálogo con el botón \"Atrás\" solo si no está cargando.\r\n        dismissOnBack = uiState !is ForgotPasswordUiState.Loading,\r\n        // Permite descartar el diálogo pulsando fuera solo si no está cargando.\r\n        dismissOnClickOutside = uiState !is ForgotPasswordUiState.Loading\r\n    )\r\n\r\n    /* ---- Fondo degradado ---- */\r\n    val gradient = Brush.verticalGradient(\r\n        listOf(Color(0xFF3EA8FE).copy(alpha = .25f), Color.White)\r\n    )\r\n\r\n    // Contenedor principal que ocupa toda la pantalla.\r\n    Box(Modifier.fillMaxSize()) {\r\n\r\n        /* ---------- CONTENIDO PRINCIPAL ---------- */\r\n        // Columna para organizar los elementos verticalmente, con scroll.\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .background(gradient) // Aplica el fondo degradado.\r\n                .verticalScroll(rememberScrollState()) // Permite el desplazamiento vertical.\r\n                // Padding para el contenido, especialmente para dejar espacio al Header flotante.\r\n                .padding(top = 100.dp, start = 24.dp, end = 24.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally // Centra los elementos horizontalmente.\r\n        ) {\r\n            // Imagen ilustrativa.\r\n            ImageContainer(\r\n                resId = R.drawable.img_forgotpassword, // ID del recurso drawable.\r\n                contentDescription = null, // Decorativa, el texto explica el propósito.\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .height(300.dp)\r\n                    .padding(bottom = 24.dp)\r\n            )\r\n\r\n            // Texto instructivo.\r\n            Description(\r\n                text = \"Ingresa tu correo electrónico y enviaremos un link para recuperar tu contraseña\",\r\n                modifier = Modifier.fillMaxWidth(),\r\n                textAlign = TextAlign.Center // Texto centrado.\r\n            )\r\n\r\n            Spacer(Modifier.height(24.dp)) // Espacio vertical.\r\n\r\n            // Contenedor para el campo de email.\r\n            FormContainer {\r\n                InputEmail(\r\n                    value = vm.email, // El valor del email viene del ViewModel.\r\n                    onValueChange = vm::onEmailChange, // Actualiza el email en el ViewModel.\r\n                    label = \"Correo electrónico\" // Etiqueta para el campo.\r\n                )\r\n            }\r\n\r\n            Spacer(Modifier.height(32.dp))\r\n\r\n            // Botón de envío.\r\n            PrimaryButton(\r\n                text = \"Enviar\",\r\n                // Habilita el botón solo si no se está en estado de carga.\r\n                enabled = uiState !is ForgotPasswordUiState.Loading,\r\n                onClick = vm::sendResetLink, // Llama a la función del ViewModel para enviar el enlace.\r\n                modifier = Modifier.fillMaxWidth()\r\n            )\r\n        }\r\n\r\n        /* ---------- HEADER flotante ---------- */\r\n        // Se muestra superpuesto en la parte superior.\r\n        Header(\r\n            title          = \"Recuperar Contraseña\",\r\n            showBackButton = true, // Muestra el botón de retroceso.\r\n            onBackClick    = { nav.navigateUp() }, // Acción para el botón de retroceso.\r\n            modifier       = Modifier.align(Alignment.TopCenter) // Alinea el Header en la parte superior.\r\n        )\r\n\r\n        /* ---------- Snackbar para errores ---------- */\r\n        // Se muestra en la parte inferior.\r\n        SnackbarHost(snackbar, Modifier.align(Alignment.BottomCenter))\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/tibibalance/ui/screens/auth/forgot/ForgotPasswordScreen.kt b/app/src/main/java/com/app/tibibalance/ui/screens/auth/forgot/ForgotPasswordScreen.kt
--- a/app/src/main/java/com/app/tibibalance/ui/screens/auth/forgot/ForgotPasswordScreen.kt	(revision 1bb93ec19fc1df0b6ca7700e22ed264673395d4d)
+++ b/app/src/main/java/com/app/tibibalance/ui/screens/auth/forgot/ForgotPasswordScreen.kt	(date 1748233627634)
@@ -140,7 +140,11 @@
     )
 
     // Contenedor principal que ocupa toda la pantalla.
-    Box(Modifier.fillMaxSize()) {
+    Box(
+        Modifier
+            .fillMaxSize()
+            .windowInsetsPadding(WindowInsets.safeDrawing)
+    ) {
 
         /* ---------- CONTENIDO PRINCIPAL ---------- */
         // Columna para organizar los elementos verticalmente, con scroll.
Index: app/src/main/java/com/app/tibibalance/ui/screens/auth/signin/SignInScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// ui/screens/auth/signin/SignInScreen.kt\r\npackage com.app.tibibalance.ui.screens.auth.signin\r\n\r\nimport android.app.Activity\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Error\r\nimport androidx.compose.material3.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.credentials.CredentialManager\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.navigation.NavController\r\nimport com.app.tibibalance.R\r\nimport com.app.tibibalance.auth.GoogleOneTapHelper\r\nimport com.app.tibibalance.ui.components.containers.ImageContainer\r\nimport com.app.tibibalance.ui.components.layout.Header\r\nimport com.app.tibibalance.ui.components.containers.FormContainer\r\nimport com.app.tibibalance.ui.components.buttons.TextButtonLink\r\nimport com.app.tibibalance.ui.components.buttons.GoogleSignButton\r\nimport com.app.tibibalance.ui.components.buttons.PrimaryButton\r\nimport com.app.tibibalance.ui.components.dialogs.DialogButton\r\nimport com.app.tibibalance.ui.components.dialogs.ModalInfoDialog\r\nimport com.app.tibibalance.ui.components.inputs.InputEmail\r\nimport com.app.tibibalance.ui.components.inputs.InputPassword\r\nimport com.app.tibibalance.ui.navigation.Screen\r\nimport com.google.android.libraries.identity.googleid.GoogleIdTokenCredential\r\nimport kotlinx.coroutines.launch\r\n\r\nprivate const val WEB_CLIENT_ID =\r\n    \"467927540157-tvu0re0msga2o01tsj9t1r1o6kqvek3j.apps.googleusercontent.com\"\r\n\r\n@Composable\r\nfun SignInScreen(\r\n    nav: NavController,\r\n    vm : SignInViewModel = hiltViewModel()\r\n) {\r\n    /* --- estado de inputs --- */\r\n    var email by remember { mutableStateOf(\"\") }\r\n    var pass  by remember { mutableStateOf(\"\") }\r\n\r\n    /* --- estado global --- */\r\n    val uiState  by vm.ui.collectAsState()\r\n    val snackbar = remember { SnackbarHostState() }\r\n    val scope    = rememberCoroutineScope()\r\n\r\n    /* --- Credential-Manager --- */\r\n    val ctx      = LocalContext.current\r\n    val activity = ctx as Activity\r\n    val cm       = remember(activity) { CredentialManager.create(activity) }\r\n\r\n    /* --- navegación reactivamente --- */\r\n    /* dentro de SignInScreen.kt – LaunchedEffect(uiState) */\r\n\r\n    LaunchedEffect(uiState) {\r\n        (uiState as? SignInUiState.Success)?.let { s ->\r\n\r\n            // 1) si NO está verificado → VerifyEmail  (igual que antes)\r\n            if (!s.verified) {\r\n                nav.navigate(Screen.VerifyEmail.route) {\r\n                    popUpTo(Screen.Launch.route) { inclusive = true }\r\n                }\r\n                return@LaunchedEffect\r\n            }\r\n\r\n            // 2) verificado → deja que LaunchScreen decida (onboarding vs main)\r\n            nav.navigate(Screen.Launch.route) {\r\n                popUpTo(Screen.Launch.route) { inclusive = true }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /* --- Google One-Tap launcher --- */\r\n    fun launchGoogleSignIn() = scope.launch {\r\n        val req = GoogleOneTapHelper.buildRequest(WEB_CLIENT_ID)\r\n        try {\r\n            val resp   = cm.getCredential(activity, req)\r\n            val idTkn  = GoogleIdTokenCredential.createFrom(resp.credential.data).idToken\r\n            if (idTkn.isBlank()) { snackbar.showSnackbar(\"Token vacío\"); return@launch }\r\n            vm.finishGoogleSignIn(idTkn)\r\n        } catch (ex: Exception) {\r\n            snackbar.showSnackbar(\"Google cancelado: ${ex.message}\")\r\n        }\r\n    }\r\n\r\n    /* --- diálogo global --- */\r\n    val showDialog = uiState is SignInUiState.Loading || uiState is SignInUiState.Error\r\n    ModalInfoDialog(\r\n        visible = showDialog,\r\n        loading = uiState is SignInUiState.Loading,\r\n        icon    = if (uiState is SignInUiState.Error) Icons.Default.Error else null,\r\n        title   = if (uiState is SignInUiState.Error) \"Error\" else null,\r\n        message = (uiState as? SignInUiState.Error)?.message,\r\n        primaryButton = if (uiState is SignInUiState.Error)\r\n            DialogButton(\"Aceptar\") { vm.consumeError() } else null,\r\n        dismissOnBack = uiState !is SignInUiState.Loading,\r\n        dismissOnClickOutside = uiState !is SignInUiState.Loading\r\n    )\r\n\r\n    val fieldErr = uiState as? SignInUiState.FieldError\r\n\r\n    /* --- UI principal --- */\r\n    val gradient = Brush.verticalGradient(\r\n        listOf(MaterialTheme.colorScheme.primary.copy(.25f), Color.White)\r\n    )\r\n\r\n    Box(\r\n        Modifier\r\n            .fillMaxSize()\r\n            .background(gradient)\r\n    ) {\r\n        Column(\r\n            Modifier\r\n                .fillMaxSize()\r\n                .verticalScroll(rememberScrollState())\r\n                .padding(top = 80.dp, start = 24.dp, end = 24.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally\r\n        ) {\r\n            ImageContainer(\r\n                resId = R.drawable.img_login,\r\n                contentDescription = null,\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .height(220.dp)\r\n            )\r\n\r\n            Spacer(Modifier.height(24.dp))\r\n\r\n            FormContainer {\r\n                InputEmail(\r\n                    value = email,\r\n                    onValueChange = { email = it; vm.consumeError() },\r\n                    isError = fieldErr?.emailError != null,\r\n                    supportingText = fieldErr?.emailError\r\n                )\r\n                InputPassword(\r\n                    value = pass,\r\n                    onValueChange = { pass = it; vm.consumeError() },\r\n                    isError = fieldErr?.passError != null,\r\n                    supportingText = fieldErr?.passError\r\n                )\r\n            }\r\n\r\n            Spacer(Modifier.height(12.dp))\r\n            TextButtonLink(\r\n                text = \"¿Olvidaste tu contraseña?\", onClick = { nav.navigate(Screen.Forgot.route) })\r\n            Spacer(Modifier.height(24.dp))\r\n\r\n            PrimaryButton(\r\n                text    = stringResource(R.string.btn_sign_in),\r\n                enabled = uiState !is SignInUiState.Loading,\r\n                onClick = { vm.signIn(email, pass) }\r\n            )\r\n\r\n            Spacer(Modifier.height(20.dp))\r\n            Row(verticalAlignment = Alignment.CenterVertically) {\r\n                HorizontalDivider(Modifier.weight(1f)); Text(\"  •  \"); HorizontalDivider(Modifier.weight(1f))\r\n            }\r\n            Spacer(Modifier.height(8.dp))\r\n\r\n            GoogleSignButton(onClick = ::launchGoogleSignIn)\r\n\r\n            Spacer(Modifier.height(24.dp))\r\n            Row {\r\n                Text(\"¿Aún no tienes cuenta? \")\r\n                TextButtonLink(text = \"Regístrate\", onClick = { nav.navigate(Screen.SignUp.route) })\r\n            }\r\n            Spacer(Modifier.height(24.dp))\r\n        }\r\n\r\n        Header(\r\n            title = \"Iniciar sesión\",\r\n            showBackButton = true,\r\n            onBackClick = { nav.navigateUp() },\r\n            modifier = Modifier.align(Alignment.TopCenter)\r\n        )\r\n\r\n        SnackbarHost(snackbar, Modifier.align(Alignment.BottomCenter))\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/tibibalance/ui/screens/auth/signin/SignInScreen.kt b/app/src/main/java/com/app/tibibalance/ui/screens/auth/signin/SignInScreen.kt
--- a/app/src/main/java/com/app/tibibalance/ui/screens/auth/signin/SignInScreen.kt	(revision 1bb93ec19fc1df0b6ca7700e22ed264673395d4d)
+++ b/app/src/main/java/com/app/tibibalance/ui/screens/auth/signin/SignInScreen.kt	(date 1748233653177)
@@ -117,6 +117,7 @@
     Box(
         Modifier
             .fillMaxSize()
+            .windowInsetsPadding(WindowInsets.safeDrawing)
             .background(gradient)
     ) {
         Column(
Index: app/src/main/java/com/app/tibibalance/ui/screens/auth/verify/VerifyEmailScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * @file    VerifyEmailScreen.kt\r\n * @ingroup ui_screens_auth\r\n * @brief   Composable para la pantalla de verificación de correo electrónico.\r\n *\r\n * @details\r\n * Esta pantalla se muestra después de que un usuario se registra con correo y contraseña,\r\n * o cuando un usuario que ha iniciado sesión pero no ha verificado su correo intenta\r\n * acceder a contenido protegido.\r\n *\r\n * Responsabilidades:\r\n * - Informar al usuario que se ha enviado un correo de verificación.\r\n * - Proveer una ilustración y texto instructivo.\r\n * - Ofrecer un botón para \"Reenviar correo\" si el usuario no lo recibió o expiró.\r\n * - Ofrecer un botón para que el usuario indique \"Ya lo verifiqué\", lo que desencadena\r\n * una comprobación del estado de verificación en el backend.\r\n * - Ofrecer una opción para \"Cerrar sesión\" si el usuario desea abandonar el proceso.\r\n * - Interactuar con [VerifyEmailViewModel] para manejar la lógica de reenvío,\r\n * verificación y cierre de sesión.\r\n * - Mostrar feedback al usuario mediante [com.app.tibibalance.ui.components.dialogs.ModalInfoDialog] para estados de carga,\r\n * éxito (correo reenviado, verificación exitosa) o errores.\r\n * - Navegar a [Screen.Launch] si el usuario cierra sesión.\r\n * - Navegar a [Screen.Main] si la verificación es exitosa.\r\n *\r\n * La UI utiliza un fondo degradado y componentes reutilizables como [Header],\r\n * [ImageContainer], [PrimaryButton], y [TextButtonLink].\r\n *\r\n * @see VerifyEmailViewModel ViewModel que gestiona la lógica y el estado de esta pantalla.\r\n * @see VerifyEmailUiState Estados de la UI para esta pantalla.\r\n * @see com.app.tibibalance.ui.components.dialogs.ModalInfoDialog Componente para mostrar diálogos de carga, éxito y error.\r\n * @see Header Componente para la barra superior de la pantalla.\r\n * @see ImageContainer Componente para mostrar la ilustración.\r\n * @see PrimaryButton Componente para los botones de acción principales.\r\n * @see TextButtonLink Componente para el enlace de \"Cerrar sesión\".\r\n * @see Screen Rutas de navegación de la aplicación.\r\n */\r\npackage com.app.tibibalance.ui.screens.auth.verify\r\n\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Check\r\nimport androidx.compose.material.icons.filled.Error\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.navigation.NavController\r\nimport com.app.tibibalance.R\r\nimport com.app.tibibalance.ui.components.*\r\nimport com.app.tibibalance.ui.components.buttons.PrimaryButton\r\nimport com.app.tibibalance.ui.components.buttons.TextButtonLink\r\nimport com.app.tibibalance.ui.components.containers.ImageContainer\r\nimport com.app.tibibalance.ui.components.dialogs.DialogButton\r\nimport com.app.tibibalance.ui.components.dialogs.ModalInfoDialog\r\nimport com.app.tibibalance.ui.components.layout.Header\r\nimport com.app.tibibalance.ui.navigation.Screen\r\n\r\n/**\r\n * @brief Composable principal para la pantalla de verificación de correo electrónico.\r\n *\r\n * @param nav El [NavController] utilizado para la navegación entre pantallas.\r\n * @param vm La instancia de [VerifyEmailViewModel] (inyectada por Hilt) que gestiona\r\n * la lógica y el estado de esta pantalla.\r\n */\r\n@Composable\r\nfun VerifyEmailScreen(\r\n    nav: NavController,\r\n    vm: VerifyEmailViewModel = hiltViewModel()\r\n) {\r\n    /* ---------- State ---------- */\r\n    // Observa el estado de la UI emitido por el ViewModel.\r\n    val uiState by vm.ui.collectAsState()\r\n\r\n    /* ---------- React to side-effects (Navegación post-cierre de sesión) ---------- */\r\n    // Efecto lanzado cuando uiState cambia, específicamente para manejar el cierre de sesión.\r\n    LaunchedEffect(uiState) {\r\n        if (uiState is VerifyEmailUiState.SignedOut) {\r\n            // Navega a la pantalla de inicio (LaunchScreen).\r\n            nav.navigate(Screen.Launch.route) {\r\n                // Limpia la pila de navegación hasta LaunchScreen para evitar volver.\r\n                popUpTo(Screen.Launch.route) { inclusive = true }\r\n            }\r\n            vm.clear() // Limpia el estado en el ViewModel a Idle.\r\n        }\r\n    }\r\n\r\n    /* ---------- Dialog flags (para ModalInfoDialog) ---------- */\r\n    // Determina si el ModalInfoDialog debe mostrarse y qué contenido tendrá.\r\n    val loading  = uiState is VerifyEmailUiState.Loading // True si la VM está procesando algo.\r\n    val success  = uiState as? VerifyEmailUiState.Success // Contiene mensaje de éxito si no es null.\r\n    val error    = uiState as? VerifyEmailUiState.Error // Contiene mensaje de error si no es null.\r\n    // El diálogo se muestra si está cargando, o si hay un mensaje de éxito o error.\r\n    val showDialog = loading || success != null || error != null\r\n\r\n    ModalInfoDialog(\r\n        visible = showDialog, // Visibilidad del diálogo.\r\n        loading = loading,    // Muestra spinner si está cargando.\r\n        icon = when {      // Icono según el estado.\r\n            success != null -> Icons.Default.Check\r\n            error != null -> Icons.Default.Error\r\n            else -> null\r\n        },\r\n        iconColor = when {      // Color del icono.\r\n            success != null -> MaterialTheme.colorScheme.onPrimaryContainer\r\n            error != null -> MaterialTheme.colorScheme.error\r\n            else -> MaterialTheme.colorScheme.onPrimaryContainer\r\n        },\r\n        iconBgColor = when {    // Color de fondo para el contenedor del icono.\r\n            success != null -> MaterialTheme.colorScheme.primaryContainer\r\n            error != null -> MaterialTheme.colorScheme.errorContainer\r\n            else -> MaterialTheme.colorScheme.primaryContainer\r\n        },\r\n        title = when {          // Título del diálogo.\r\n            success != null -> \"Listo\"\r\n            error != null -> \"Error\"\r\n            else -> null\r\n        },\r\n        message = success?.message ?: error?.message, // Mensaje principal.\r\n        primaryButton = when { // Botón primario del diálogo.\r\n            success != null -> DialogButton(\"Aceptar\") {\r\n                vm.clear()\r\n                if (success.goHome) {\r\n                    nav.navigate(Screen.Launch.route) {          // \uD83D\uDC48 cambia Main → Launch\r\n                        popUpTo(Screen.Launch.route) { inclusive = true }\r\n                    }\r\n                }\r\n            }\r\n\r\n            error != null -> DialogButton(\"Aceptar\") {\r\n                vm.clear()\r\n            }\r\n            else -> null\r\n        },\r\n        // El diálogo no se puede descartar con el botón \"Atrás\" o pulsando fuera si está cargando.\r\n        dismissOnBack = !loading,\r\n        dismissOnClickOutside = !loading\r\n    )\r\n\r\n    /* ---------- Background ---------- */\r\n    // Define un fondo degradado para la pantalla.\r\n    val gradient = Brush.verticalGradient(\r\n        listOf(Color(0xFF3EA8FE).copy(alpha = .25f), Color.White)\r\n    )\r\n\r\n    // Contenedor Box principal que ocupa toda la pantalla y aplica el fondo.\r\n    Box(\r\n        Modifier\r\n            .fillMaxSize()\r\n            .background(gradient)\r\n    ) {\r\n\r\n        /* ---------- Header ---------- */\r\n        // Barra superior fija de la pantalla.\r\n        Header(\r\n            title          = stringResource(R.string.verify_email_title),\r\n            showBackButton = false, // No se muestra botón de retroceso.\r\n            modifier       = Modifier\r\n                .fillMaxWidth()\r\n                .background(Color.White) // Fondo blanco para el Header.\r\n                .height(56.dp) // Altura estándar para la barra de aplicación.\r\n                .align(Alignment.TopCenter) // Alinea el Header en la parte superior.\r\n        )\r\n\r\n        /* ---------- Content ---------- */\r\n        // Columna para organizar el contenido principal de la pantalla.\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                // Padding para evitar solapamiento con el Header y para los bordes.\r\n                .padding(top = 80.dp, start = 24.dp, end = 24.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally, // Centra el contenido horizontalmente.\r\n            verticalArrangement = Arrangement.Center // Centra el contenido verticalmente.\r\n        ) {\r\n\r\n            /* Texto principal */\r\n            Text(\r\n                \"¡Revisa tu correo!\",\r\n                style     = MaterialTheme.typography.headlineSmall, // Estilo de texto prominente.\r\n                textAlign = TextAlign.Center // Texto centrado.\r\n            )\r\n\r\n            Spacer(Modifier.height(8.dp)) // Espacio vertical.\r\n\r\n            /* Ilustración */\r\n            // Muestra una imagen relacionada con el envío de correos.\r\n            ImageContainer(\r\n                resId = R.drawable.img_verify, // ID del recurso drawable.\r\n                contentDescription = \"Email enviado\", // Descripción para accesibilidad.\r\n                modifier = Modifier.size(300.dp) // Tamaño de la imagen.\r\n            )\r\n\r\n            Spacer(Modifier.height(8.dp))\r\n\r\n            /* Subtítulo/Instrucción */\r\n            Text(\r\n                \"Se ha enviado a tu correo un enlace\\npara verificar tu cuenta\",\r\n                style     = MaterialTheme.typography.bodyMedium, // Estilo de texto estándar.\r\n                textAlign = TextAlign.Center\r\n            )\r\n\r\n            Spacer(Modifier.height(30.dp))\r\n\r\n            /* Botón: Reenviar correo */\r\n            PrimaryButton(\r\n                text = \"Reenviar correo\",\r\n                onClick = vm::resend, // Llama al método del ViewModel para reenviar.\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .height(48.dp) // Altura del botón.\r\n            )\r\n\r\n            Spacer(Modifier.height(15.dp))\r\n\r\n            /* Botón: Ya lo verifiqué */\r\n            PrimaryButton(\r\n                text = \"Ya lo verifiqué\",\r\n                container = Color(0xFF3EA8FE), // Color de fondo personalizado.\r\n                onClick = vm::verify, // Llama al método del ViewModel para verificar.\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .height(48.dp)\r\n            )\r\n\r\n            Spacer(Modifier.height(20.dp))\r\n\r\n            /* Enlace: Cerrar sesión */\r\n            TextButtonLink(\r\n                text = \"Cerrar sesión\",\r\n                onClick = vm::signOut\r\n            )\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/tibibalance/ui/screens/auth/verify/VerifyEmailScreen.kt b/app/src/main/java/com/app/tibibalance/ui/screens/auth/verify/VerifyEmailScreen.kt
--- a/app/src/main/java/com/app/tibibalance/ui/screens/auth/verify/VerifyEmailScreen.kt	(revision 1bb93ec19fc1df0b6ca7700e22ed264673395d4d)
+++ b/app/src/main/java/com/app/tibibalance/ui/screens/auth/verify/VerifyEmailScreen.kt	(date 1748233697881)
@@ -157,6 +157,7 @@
     Box(
         Modifier
             .fillMaxSize()
+            .windowInsetsPadding(WindowInsets.safeDrawing)
             .background(gradient)
     ) {
 
Index: app/src/main/java/com/app/tibibalance/ui/screens/auth/signup/SignUpScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.tibibalance.ui.screens.auth.signup\r\n\r\nimport android.app.Activity\r\nimport android.app.DatePickerDialog\r\nimport android.os.Build\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Check\r\nimport androidx.compose.material.icons.filled.Error\r\nimport androidx.compose.material3.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.credentials.CredentialManager\r\nimport androidx.credentials.CreatePasswordRequest\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.navigation.NavController\r\nimport com.app.tibibalance.R\r\nimport com.app.tibibalance.ui.components.*\r\nimport com.app.tibibalance.ui.components.buttons.GoogleSignButton\r\nimport com.app.tibibalance.ui.components.buttons.PrimaryButton\r\nimport com.app.tibibalance.ui.components.buttons.TextButtonLink\r\nimport com.app.tibibalance.ui.components.containers.FormContainer\r\nimport com.app.tibibalance.ui.components.containers.ImageContainer\r\nimport com.app.tibibalance.ui.components.dialogs.DialogButton\r\nimport com.app.tibibalance.ui.components.dialogs.ModalInfoDialog\r\nimport com.app.tibibalance.ui.components.inputs.*\r\nimport com.app.tibibalance.ui.components.layout.Header\r\nimport com.app.tibibalance.ui.navigation.Screen\r\nimport com.google.android.libraries.identity.googleid.GoogleIdTokenCredential\r\nimport kotlinx.coroutines.launch\r\nimport java.time.LocalDate\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.*\r\n\r\nprivate const val WEB_CLIENT_ID =\r\n    \"467927540157-tvu0re0msga2o01tsj9t1r1o6kqvek3j.apps.googleusercontent.com\"\r\n\r\n@RequiresApi(Build.VERSION_CODES.O)\r\n@Composable\r\nfun SignUpScreen(\r\n    nav: NavController,\r\n    vm : SignUpViewModel = hiltViewModel()\r\n) {\r\n    /* ----- estado local ----- */\r\n    var username  by remember { mutableStateOf(\"\") }\r\n    var birthDate by remember { mutableStateOf<LocalDate?>(null) }\r\n    var email     by remember { mutableStateOf(\"\") }\r\n    var pass1     by remember { mutableStateOf(\"\") }\r\n    var pass2     by remember { mutableStateOf(\"\") }\r\n\r\n    /* ----- colecta de estado global ----- */\r\n    val uiState  by vm.ui.collectAsState()\r\n    val snackbar = remember { SnackbarHostState() }\r\n    val scope    = rememberCoroutineScope()\r\n\r\n    /* ----- Credential-Manager y helpers ----- */\r\n    val ctx      = LocalContext.current\r\n    val activity = ctx as Activity\r\n    val cm       = remember(activity) { CredentialManager.create(activity) }\r\n\r\n    fun launchGoogle() = scope.launch {\r\n        try {\r\n            val res   = cm.getCredential(activity, vm.buildGoogleRequest(WEB_CLIENT_ID))\r\n            val token = GoogleIdTokenCredential.createFrom(res.credential.data).idToken\r\n            if (token.isNullOrBlank()) snackbar.showSnackbar(\"Token vacío\"); else vm.finishGoogleSignUp(token)\r\n        } catch (e: Exception) {\r\n            snackbar.showSnackbar(e.message ?: \"Google cancelado\")\r\n        }\r\n    }\r\n\r\n    /* ----- navegación reactiva ----- */\r\n    LaunchedEffect(uiState) {\r\n        when (uiState) {\r\n            is SignUpUiState.Success       -> nav.navigate(Screen.VerifyEmail.route) {\r\n                popUpTo(Screen.SignUp.route) { inclusive = true }\r\n            }\r\n            SignUpUiState.GoogleSuccess    -> nav.navigate(Screen.Main.route) {\r\n                popUpTo(Screen.Launch.route) { inclusive = true }\r\n            }\r\n            else -> Unit\r\n        }\r\n    }\r\n\r\n    /* ----- flags de diálogo ----- */\r\n    val loading = uiState is SignUpUiState.Loading\r\n    val fieldErr = uiState as? SignUpUiState.FieldError\r\n\r\n    ModalInfoDialog(\r\n        visible  = loading || uiState is SignUpUiState.Error,\r\n        loading  = loading,\r\n        icon     = when (uiState) {\r\n            is SignUpUiState.Error -> Icons.Default.Error\r\n            else                   -> null\r\n        },\r\n        title    = if (uiState is SignUpUiState.Error) \"Error\" else null,\r\n        message  = (uiState as? SignUpUiState.Error)?.message,\r\n        primaryButton = if (uiState is SignUpUiState.Error)\r\n            DialogButton(\"Aceptar\") { vm.consumeError() } else null,\r\n        dismissOnBack = !loading,\r\n        dismissOnClickOutside = !loading\r\n    )\r\n\r\n    /* ----- UI principal ----- */\r\n    val gradient = Brush.verticalGradient(\r\n        listOf(MaterialTheme.colorScheme.primary.copy(.25f), Color.White)\r\n    )\r\n\r\n    Box(\r\n        Modifier.fillMaxSize().background(gradient)\r\n    ) {\r\n        /* scrollable column */\r\n        Column(\r\n            Modifier.fillMaxSize().verticalScroll(rememberScrollState())\r\n                .padding(top = 80.dp, start = 24.dp, end = 24.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally\r\n        ) {\r\n            ImageContainer(R.drawable.img_signup, null,\r\n                Modifier.fillMaxWidth().height(220.dp).padding(bottom = 24.dp))\r\n\r\n            FormContainer {\r\n                InputText(\r\n                    value = username,\r\n                    onValueChange = { username = it; vm.consumeFieldError() },\r\n                    placeholder = \"Nombre de usuario*\",\r\n                    isError = fieldErr?.userNameError != null,\r\n                    supportingText = fieldErr?.userNameError\r\n                )\r\n\r\n                val fmt = remember { DateTimeFormatter.ofPattern(\"dd/MM/yyyy\") }\r\n                InputDate(\r\n                    value = birthDate?.format(fmt) ?: \"\",\r\n                    onClick = {\r\n                        val c = Calendar.getInstance()\r\n                        DatePickerDialog(\r\n                            ctx,\r\n                            { _, y, m, d -> birthDate = LocalDate.of(y, m + 1, d); vm.consumeFieldError() },\r\n                            c[Calendar.YEAR], c[Calendar.MONTH], c[Calendar.DAY_OF_MONTH]\r\n                        ).show()\r\n                    },\r\n                    isError = fieldErr?.birthDateError != null,\r\n                    supportingText = fieldErr?.birthDateError\r\n                )\r\n\r\n                InputEmail(\r\n                    value = email,\r\n                    onValueChange = { email = it; vm.consumeFieldError() },\r\n                    label = \"Correo*\",\r\n                    isError = fieldErr?.emailError != null,\r\n                    supportingText = fieldErr?.emailError\r\n                )\r\n\r\n                InputPassword(\r\n                    value = pass1,\r\n                    onValueChange = { pass1 = it; vm.consumeFieldError() },\r\n                    label = \"Contraseña*\",\r\n                    isError = fieldErr?.pass1Error != null,\r\n                    supportingText = fieldErr?.pass1Error\r\n                )\r\n\r\n                InputPassword(\r\n                    value = pass2,\r\n                    onValueChange = { pass2 = it; vm.consumeFieldError() },\r\n                    label = \"Confirmar contraseña*\",\r\n                    isError = fieldErr?.pass2Error != null,\r\n                    supportingText = fieldErr?.pass2Error\r\n                )\r\n            }\r\n\r\n            Spacer(Modifier.height(32.dp))\r\n            PrimaryButton(\r\n                text = stringResource(R.string.btn_sign_up),\r\n                enabled = !loading,\r\n                onClick = {\r\n                    vm.signUp(username, birthDate, email, pass1, pass2)\r\n                    scope.launch {\r\n                        try { cm.createCredential(activity, CreatePasswordRequest(username, pass1)) }\r\n                        catch (_: Exception) {}\r\n                    }\r\n                }\r\n            )\r\n\r\n            Spacer(Modifier.height(24.dp))\r\n            Row(verticalAlignment = Alignment.CenterVertically) {\r\n                HorizontalDivider(Modifier.weight(1f)); Text(\"  •  \"); HorizontalDivider(Modifier.weight(1f))\r\n            }\r\n            Spacer(Modifier.height(8.dp))\r\n            GoogleSignButton(onClick = ::launchGoogle)\r\n            Spacer(Modifier.height(16.dp))\r\n            Row(verticalAlignment = Alignment.CenterVertically) {\r\n                Text(\"¿Ya tienes cuenta? \")\r\n                TextButtonLink(\r\n                    text = stringResource(R.string.btn_sign_in),\r\n                    onClick = { nav.navigate(Screen.SignIn.route)}\r\n                )\r\n            }\r\n            Spacer(Modifier.height(24.dp))\r\n        }\r\n\r\n        Header(\r\n            title = stringResource(R.string.sign_up_title),\r\n            showBackButton = true,\r\n            onBackClick = { nav.navigateUp() },\r\n            modifier = Modifier.align(Alignment.TopCenter)\r\n        )\r\n\r\n        SnackbarHost(snackbar, Modifier.align(Alignment.BottomCenter))\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/tibibalance/ui/screens/auth/signup/SignUpScreen.kt b/app/src/main/java/com/app/tibibalance/ui/screens/auth/signup/SignUpScreen.kt
--- a/app/src/main/java/com/app/tibibalance/ui/screens/auth/signup/SignUpScreen.kt	(revision 1bb93ec19fc1df0b6ca7700e22ed264673395d4d)
+++ b/app/src/main/java/com/app/tibibalance/ui/screens/auth/signup/SignUpScreen.kt	(date 1748233677996)
@@ -116,7 +116,10 @@
     )
 
     Box(
-        Modifier.fillMaxSize().background(gradient)
+        Modifier
+            .fillMaxSize()
+            .windowInsetsPadding(WindowInsets.safeDrawing)
+            .background(gradient)
     ) {
         /* scrollable column */
         Column(
Index: app/src/main/java/com/app/tibibalance/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.tibibalance\r\n\r\nimport android.os.Bundle\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.enableEdgeToEdge\r\nimport androidx.activity.compose.setContent\r\nimport com.app.tibibalance.ui.navigation.AppNavGraph\r\nimport com.app.tibibalance.ui.theme.TibiBalanceTheme\r\nimport com.app.data.alert.di.ChannelInitializer      // \uD83D\uDC48  IMPORTA el alias\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport javax.inject.Inject\r\n\r\n@AndroidEntryPoint\r\nclass MainActivity : ComponentActivity() {\r\n\r\n    /** Lambda inyectada que registra los canales de notificación. */\r\n    @Inject lateinit var initNotificationChannels: ChannelInitializer   // \uD83D\uDC48  cambia el tipo\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        enableEdgeToEdge()\r\n        initNotificationChannels()   // fun-interface admite llamada directa\r\n\r\n        setContent {\r\n            TibiBalanceTheme { AppNavGraph() }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/tibibalance/MainActivity.kt b/app/src/main/java/com/app/tibibalance/MainActivity.kt
--- a/app/src/main/java/com/app/tibibalance/MainActivity.kt	(revision 1bb93ec19fc1df0b6ca7700e22ed264673395d4d)
+++ b/app/src/main/java/com/app/tibibalance/MainActivity.kt	(date 1748232721691)
@@ -1,9 +1,11 @@
 package com.app.tibibalance
 
+import android.os.Build
 import android.os.Bundle
 import androidx.activity.ComponentActivity
 import androidx.activity.enableEdgeToEdge
 import androidx.activity.compose.setContent
+import androidx.annotation.RequiresApi
 import com.app.tibibalance.ui.navigation.AppNavGraph
 import com.app.tibibalance.ui.theme.TibiBalanceTheme
 import com.app.data.alert.di.ChannelInitializer      // 👈  IMPORTA el alias
@@ -16,6 +18,7 @@
     /** Lambda inyectada que registra los canales de notificación. */
     @Inject lateinit var initNotificationChannels: ChannelInitializer   // 👈  cambia el tipo
 
+    @RequiresApi(Build.VERSION_CODES.O)
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
 
