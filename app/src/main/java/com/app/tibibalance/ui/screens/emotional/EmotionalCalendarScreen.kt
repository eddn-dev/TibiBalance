/**
 * @file      EmotionalCalendarScreen.kt
 * @ingroup   ui_screens_emotional
 * @brief     Pantalla de calendario emocional con flujo declarativo (StateFlow + DialogState).
 *
 * Este archivo define la pantalla principal `EmotionalCalendarScreen`, la cual:
 *  - Observa el estado de la UI y muestra un calendario o mensajes de carga/errores.
 *  - Maneja distintos tipos de di√°logos (informaci√≥n, error, registro de emoci√≥n).
 *  - Incluye un enlace de texto ‚ÄúSABER M√ÅS‚Äù que despliega un modal de informaci√≥n adicional
 *    con texto y una imagen, cuando el usuario lo pulsa.
 *
 * @see EmotionalCalendarViewModel
 * @see CalendarGrid
 */
package com.app.tibibalance.ui.screens.emotional

import android.os.Build
import androidx.annotation.DrawableRes
import androidx.annotation.RequiresApi
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Error
import androidx.compose.material.icons.filled.Info
import androidx.compose.material3.Button
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import com.app.tibibalance.R
import com.app.tibibalance.ui.components.buttons.TextButtonLink
import com.app.tibibalance.ui.components.containers.HabitContainer
import com.app.tibibalance.ui.components.containers.ImageContainer
import com.app.tibibalance.ui.components.containers.ModalContainer
import com.app.tibibalance.ui.components.dialogs.DialogButton
import com.app.tibibalance.ui.components.dialogs.ModalAchievementDialog
import com.app.tibibalance.ui.components.dialogs.ModalInfoDialog
import com.app.tibibalance.ui.components.utils.CalendarGrid
import com.app.tibibalance.ui.components.utils.Centered
import com.app.tibibalance.ui.components.utils.EmotionDay
import androidx.compose.ui.text.style.TextAlign
import com.app.tibibalance.ui.components.utils.gradient
import java.time.LocalDate
import java.time.format.TextStyle
import java.util.Locale

/* -------------------------------------------------------------------------- */
/*  Pantalla principal                                                         */
/* -------------------------------------------------------------------------- */

/**
 * @brief Pantalla principal del calendario emocional.
 *
 * Observa el estado desde el ViewModel y muestra:
 *  - Una vista de carga si est√° en estado Loading.
 *  - Un mensaje "Sin registros" si est√° vac√≠o.
 *  - El contenido del calendario en estado Loaded.
 *  - Un mensaje de error si ocurre alg√∫n error.
 *
 * Tambi√©n maneja distintos di√°logos de informaci√≥n, error o registro de emoci√≥n,
 * seg√∫n el estado `DialogState` proporcionado por el ViewModel.
 *
 * @param vm Instancia inyectada de EmotionalCalendarViewModel.
 */
@RequiresApi(Build.VERSION_CODES.O)
@Composable
fun EmotionalCalendarScreen(
    vm: EmotionalCalendarViewModel = hiltViewModel(),
    tutorialVm: TutorialViewModel = hiltViewModel()
) {
    /* ------------ state ------------- */
    val uiState by vm.ui.collectAsState()
    val dialog by vm.dialog.collectAsState()

    /* ------------ fondo ------------- */
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(gradient()),
        contentAlignment = Alignment.TopCenter
    ) {
        androidx.compose.material3.IconButton(
            onClick = tutorialVm::restartTutorial,
            modifier = Modifier.align(Alignment.TopEnd)
        ) {
            androidx.compose.material3.Icon(Icons.Default.Info, contentDescription = "Ayuda")
        }

        /* ---------- contenido ---------- */
        when (uiState) {
            EmotionalUiState.Loading -> Centered("Cargando‚Ä¶")
            EmotionalUiState.Empty -> Centered("Sin registros")
            is EmotionalUiState.Loaded -> CalendarContent(
                days = (uiState as EmotionalUiState.Loaded).days,
                onClick = vm::onCalendarDayClicked
            )
            is EmotionalUiState.Error -> Centered("Error :(")
        }

        /* ---------- di√°logos desde ViewModel ---------- */
        when (dialog) {
            DialogState.None -> Unit

            is DialogState.Info -> InfoModal(
                msg = (dialog as DialogState.Info).msg,
                onDismiss = vm::dismissDialog
            )

            is DialogState.Error -> ErrorModal(
                msg = (dialog as DialogState.Error).msg,
                onDismiss = vm::dismissDialog
            )

            is DialogState.Register -> {
                val date = (dialog as DialogState.Register).date
                RegisterEmotionalStateModal(
                    date = date,
                    onDismiss = vm::dismissDialog,
                    onConfirm = { emo -> vm.confirmEmotion(date, emo) }
                )
            }
        }
        val logroFeliz by vm.logroFeliz.collectAsState()
        logroFeliz?.let { logro ->
            val iconRes = when (logro.id) {
                "feliz_7_dias"         -> R.drawable.ic_tibio_calendar
                "emociones_30_dias" -> R.drawable.ic_emocional
                else                  -> R.drawable.avatar_placeholder
            }
            ModalAchievementDialog(
                visible = true,
                iconResId = iconRes,
                title = "¬°Logro desbloqueado!",
                message = "${logro.name}\n${logro.description}",
                primaryButton = DialogButton("Aceptar") {
                    vm.ocultarLogroFeliz()
                }
            )
        }
    }
}

/* -------------------------------------------------------------------------- */
/*  Sub-UI helpers                                                             */
/* -------------------------------------------------------------------------- */

/**
 * @brief Contenido principal que muestra el calendario y un enlace "SABER M√ÅS".
 *
 * - Muestra el mes actual (nombre y a√±o).
 * - Renderiza la cuadr√≠cula de d√≠as (CalendarGrid) con los √≠conos emocionales.
 * - Incluye el componente `TextButtonLink` para desplegar un modal de informaci√≥n adicional.
 * - Muestra estad√≠sticas r√°pidas de la emoci√≥n m√°s repetida.
 *
 * Para manejar el modal ‚ÄúSABER M√ÅS‚Äù, se utiliza un estado local `showMore`.
 * Al pulsar el enlace, `showMore` cambia a true y se muestra un modal personalizado
 * con texto introductorio, una imagen y texto adicional.
 *
 * @param days   Lista de objetos EmotionDayUi que describe cada d√≠a del mes.
 * @param onClick Callback que se invoca cuando se selecciona un d√≠a del calendario.
 */
@RequiresApi(Build.VERSION_CODES.O)
@Composable
private fun CalendarContent(
    days: List<EmotionDayUi>,
    onClick: (EmotionDayUi) -> Unit
) {
    // Estado local para controlar visibilidad del modal ‚ÄúSABER M√ÅS‚Äù
    var showMore by remember { mutableStateOf(false) }

    // Determinar el mes actual en formato ‚ÄúNombreMes A√±o‚Äù
    val today = LocalDate.now()
    val monthTitle = today.month
        .getDisplayName(TextStyle.FULL, Locale("es"))
        .replaceFirstChar { it.titlecase(Locale.ROOT) } + " ${today.year}"

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(horizontal = 16.dp, vertical = 12.dp),
        verticalArrangement = Arrangement.spacedBy(24.dp)
    ) {
        /* T√≠tulo mes */
        Text(
            text = monthTitle,
            style = MaterialTheme.typography.titleLarge
        )

        /* Calendario */
        CalendarGrid(
            month = "", // ya mostramos el t√≠tulo arriba
            days = days.map { dUi ->
                EmotionDay(
                    day = dUi.day,
                    emotionRes = dUi.iconRes,
                    onClick = { onClick(dUi) },
                    isSelected = false
                )
            },
            modifier = Modifier.fillMaxWidth()
        )

        /* Enlace ‚ÄúSABER M√ÅS‚Äù */
        TextButtonLink(
            text = "SABER M√ÅS",
            onClick = {
                showMore = true
            }
        )

        /* Estad√≠stica r√°pida */
        EmotionStats(days)
    }

    // ----------------- Modal personalizado ‚ÄúSABER M√ÅS‚Äù -----------------
    if (showMore) {
        ModalContainer(
            onDismissRequest = { showMore = false }
        ) {
            Column(
                modifier = Modifier.fillMaxWidth(),
                horizontalAlignment = Alignment.CenterHorizontally // Mantener esto para el Column
            ) {
                Text(
                    fontWeight = FontWeight.SemiBold,
                    text = "¬øC√≥mo te sientes hoy? ü§î",
                    style = MaterialTheme.typography.bodyMedium,
                    textAlign = TextAlign.Center
                )
                Text(
                    text = "Este espacio es para registrar \ntus emociones cada d√≠a. üíñ",
                    style = MaterialTheme.typography.bodyMedium,
                    textAlign = TextAlign.Center
                )
                Spacer(modifier = Modifier.height(12.dp))

                ImageContainer(
                    resId = R.drawable.ic_tibio_thoughtful,
                    contentDescription = "Tibio pensativo",
                    modifier = Modifier.size(100.dp)
                )

                Spacer(modifier = Modifier.height(12.dp))

                Text(
                    text = "Toca el recuadro de hoy para empezar \na registrar tus emociones. " +
                            "\n¬°La constancia diaria te ayudar√° a \nconocer mejor c√≥mo te sientes! üìä",
                    style = MaterialTheme.typography.bodyMedium,
                    textAlign = TextAlign.Center
                )

                Spacer(modifier = Modifier.height(16.dp))

                Button(
                    onClick = { showMore = false },
                    modifier = Modifier.align(Alignment.End)
                ) {
                    Text("Entendido")
                }
            }
        }
    }
}

/**
 * @brief Muestra la estad√≠stica de la emoci√≥n m√°s repetida.
 *
 * Calcula cu√°l fue la emoci√≥n con m√°s frecuencia y muestra:
 *  - El √≠cono de dicha emoci√≥n.
 *  - El texto ‚ÄúHas estado {nombreEmoci√≥n} durante {n√∫mero} d√≠as‚Äù.
 *
 * @param days Lista de objetos EmotionDayUi que contiene la emoci√≥n asignada a cada d√≠a.
 */
@Composable
private fun EmotionStats(days: List<EmotionDayUi>) {
    val (topIcon, count) = remember(days) {
        days
            .mapNotNull { it.iconRes }
            .groupingBy { it }
            .eachCount()
            .maxByOrNull { it.value }
            ?.let { it.key to it.value }
            ?: (null to 0)
    }
    val name = emotionName(topIcon)

    Text(
        text = "Estado emocional m√°s repetido",
        style = MaterialTheme.typography.titleMedium
    )
    HabitContainer(
        icon = {
            ImageContainer(
                resId = topIcon ?: R.drawable.ic_happyimage,
                contentDescription = null,
                modifier = Modifier.size(45.dp)
            )
        },
        text = "Has estado $name durante $count d√≠as",
        onClick = {},
        modifier = Modifier.fillMaxWidth()
    )
}

/* -------------------------------------------------------------------------- */
/*  Modales reutilizables                                                      */
/* -------------------------------------------------------------------------- */

/**
 * @brief Muestra un modal de informaci√≥n simple (√≠cono de info y un texto).
 *
 * @param msg       Mensaje a mostrar como t√≠tulo del modal.
 * @param onDismiss Callback que se invoca al cerrar el modal.
 */
@Composable
private fun InfoModal(msg: String, onDismiss: () -> Unit) =
    ModalInfoDialog(
        visible = true,
        icon = Icons.Default.Info,
        title = msg,
        message = "",
        primaryButton = DialogButton("Entendido", onDismiss)
    )

/**
 * @brief Muestra un modal de error (√≠cono de error y texto).
 *
 * @param msg       Mensaje de error a mostrar.
 * @param onDismiss Callback que se invoca al cerrar el modal.
 */
@Composable
private fun ErrorModal(msg: String, onDismiss: () -> Unit) =
    ModalInfoDialog(
        visible = true,
        icon = Icons.Default.Error,
        iconColor = MaterialTheme.colorScheme.onErrorContainer,
        iconBgColor = MaterialTheme.colorScheme.errorContainer,
        title = "Error",
        message = msg,
        primaryButton = DialogButton("Aceptar", onDismiss)
    )

/* -------------------------------------------------------------------------- */
/*  Utils                                                                      */
/* -------------------------------------------------------------------------- */

/**
 * @brief Convierte el recurso drawable de emoci√≥n a su nombre descriptivo.
 *
 * @param resId ID de recurso drawable que representa la emoci√≥n.
 * @return Nombre de la emoci√≥n en texto, seg√∫n el recurso.
 */
private fun emotionName(@DrawableRes resId: Int?): String = when (resId) {
    R.drawable.ic_happyimage      -> "Feliz"
    R.drawable.ic_sadimage        -> "Triste"
    R.drawable.ic_calmimage       -> "Tranquilo"
    R.drawable.ic_angryimage      -> "Enojado"
    R.drawable.ic_disgustingimage -> "Disgustado"
    R.drawable.ic_fearimage       -> "Asustado"
    else                          -> ""
}

